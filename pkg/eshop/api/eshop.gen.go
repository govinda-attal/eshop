// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Cart defines model for Cart.
type Cart struct {
	Id    string    `json:"id"`
	State CartState `json:"state"`
}

// CartItem defines model for CartItem.
type CartItem struct {
	Quantity int    `json:"quantity"`
	Sku      string `json:"sku"`
}

// CartState defines model for CartState.
type CartState struct {
	BaseAmount float32         `json:"baseAmount"`
	CartAmount float32         `json:"cartAmount"`
	LineItems  []EvaluatedItem `json:"lineItems"`
}

// Error defines model for Error.
type Error struct {
	Code    int            `json:"code"`
	Details *[]ErrorDetail `json:"details,omitempty"`
	Message string         `json:"message"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	Code    *string `json:"code,omitempty"`
	Message string  `json:"message"`
}

// EvaluatedItem defines model for EvaluatedItem.
type EvaluatedItem struct {
	Discount   float32     `json:"discount"`
	ListPrice  float32     `json:"listPrice"`
	Promotions []Promotion `json:"promotions"`
	Quantity   int         `json:"quantity"`
	SalePrice  float32     `json:"salePrice"`
	Sku        string      `json:"sku"`
}

// Promotion defines model for Promotion.
type Promotion struct {
	Buy   int      `json:"buy"`
	Info  string   `json:"info"`
	Item  *string  `json:"item,omitempty"`
	Rate  *float32 `json:"rate,omitempty"`
	Type  string   `json:"type"`
	Units *int     `json:"units,omitempty"`
}

// CartRs defines model for CartRs.
type CartRs Cart

// ErrorRs defines model for ErrorRs.
type ErrorRs Error

// NewCartRq defines model for NewCartRq.
type NewCartRq struct {
	LineItems []CartItem `json:"lineItems"`
}

// NewCartJSONRequestBody defines body for NewCart for application/json ContentType.
type NewCartJSONRequestBody NewCartRq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NewCart request  with any body
	NewCartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NewCart(ctx context.Context, body NewCartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCart request
	GetCart(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NewCartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewCartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewCart(ctx context.Context, body NewCartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewCartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCart(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCartRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNewCartRequest calls the generic NewCart builder with application/json body
func NewNewCartRequest(server string, body NewCartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNewCartRequestWithBody(server, "application/json", bodyReader)
}

// NewNewCartRequestWithBody generates requests for NewCart with any type of body
func NewNewCartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCartRequest generates requests for GetCart
func NewGetCartRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cart/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NewCart request  with any body
	NewCartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*NewCartResponse, error)

	NewCartWithResponse(ctx context.Context, body NewCartJSONRequestBody) (*NewCartResponse, error)

	// GetCart request
	GetCartWithResponse(ctx context.Context, id string) (*GetCartResponse, error)
}

type NewCartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cart
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r NewCartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewCartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cart
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NewCartWithBodyWithResponse request with arbitrary body returning *NewCartResponse
func (c *ClientWithResponses) NewCartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*NewCartResponse, error) {
	rsp, err := c.NewCartWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNewCartResponse(rsp)
}

func (c *ClientWithResponses) NewCartWithResponse(ctx context.Context, body NewCartJSONRequestBody) (*NewCartResponse, error) {
	rsp, err := c.NewCart(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseNewCartResponse(rsp)
}

// GetCartWithResponse request returning *GetCartResponse
func (c *ClientWithResponses) GetCartWithResponse(ctx context.Context, id string) (*GetCartResponse, error) {
	rsp, err := c.GetCart(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetCartResponse(rsp)
}

// ParseNewCartResponse parses an HTTP response from a NewCartWithResponse call
func ParseNewCartResponse(rsp *http.Response) (*NewCartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NewCartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCartResponse parses an HTTP response from a GetCartWithResponse call
func ParseGetCartResponse(rsp *http.Response) (*GetCartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /cart)
	NewCart(ctx echo.Context) error

	// (GET /cart/{id})
	GetCart(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NewCart converts echo context to params.
func (w *ServerInterfaceWrapper) NewCart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewCart(ctx)
	return err
}

// GetCart converts echo context to params.
func (w *ServerInterfaceWrapper) GetCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCart(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/cart", wrapper.NewCart)
	router.GET(baseURL+"/cart/:id", wrapper.GetCart)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYTW/bOBD9KwR3Dwkg2/qyY+nWj2w3h22NZPdU5EBJI5uNRKokldYw/N8XJCVZsuzG",
	"DQrs3hxpODPvzZvhRDuc8rLiDJiSON5hAV9rkOotzyiYBx/h2zsi1P1X/UfKmQKm9E9SVQVNiaKczb5I",
	"zvQz+E7KqrDnSAHfif4h67IkYotjnNRbpDYCAHGBSi4AGSMkKyBPICQiLEMb8gzIc1EFIgWmUEZlymum",
	"EGeIFAV28DMpatCeC8rgTkEpcfx5h7/WhCmqtjgOHCyfahzjN4EbPrzH+8f93sFrztcFbHhp8zuVljVB",
	"xgYRhSpBU0A8R+ob/6nAnu+uIrcJXJI04fypEnwYN9chBZFVAkJsUUXRN6o2qDFH2v6CmF4bMww++sEK",
	"752Tb/0g9IPQZLR3sEw3UJrqVIJXIFRT7F6QHabtj98F5DjGv80OUplZD3KmtaFP4L2D1bYCHGMiBNli",
	"HUaLiQrIcPy551qnYN/KijNpIxuNyf+fxmiGY5x5iednkE/y9OZmEi7cdBLdRGQS5lG6SLNFuEh97GCp",
	"iDKHEiLhTak94jjwl9O5g1MiVPvIj+bTxdw5KmmbhD4yXZrXUq20AnHsuZF2Uglecs2GPZHUVnOU5byB",
	"HnSwr94Y3A8W93Uf99T9EXRhQHhuV8/3dw/vPv3z8W+8f3SOxE4KaDJsMY0a79d2nikH3ATgBp4/8aI8",
	"mYTpIphEC5JMUt9d5jfzRZSk0blyeGE0jW6G9YiiabQ8Xw59IhqUo3lyUTlydPXBgvuTl3CNci4QOeDT",
	"uml4Xt3fvbvFDq4Z1bPY/xHdTcqjafPLxo0hOvKSPIpu3MkyyvxJOE+iSZTOvUkeEHee5WG2yJbniJ6H",
	"c8tSn+l56LdknubaHfA8D6LzTHsd0waZh67uO3Arit5eW3yeKcFfJH2rUa4Ev8aOGW2HodhV4I/7214B",
	"vGEBvEEButRGw7fXx0M0+s8BkIF7f+Be244H92ByvzSVsbHPQKaCVjokjrEE8QwCSZoBAl1roiBDUhGW",
	"EZEhXSrUjmU90W+F4OJnxrK1zMDoNQNFaGFLVoKUZK1J1tyPplNaC6HHEXkmtCBJQdUWea6ZOIeTJj19",
	"/EpeI6l4+oSoRAVIidSGMNTsLpChjtaLGTNIT1LWkgPaosdO57q7v8b3qe6iXasuqQRla5NS2zAv1fDB",
	"GB5fpTTrmu6x0y5PvkCqtPfuSh6lc1BblxRlCtYgTFZab6Nsj2Jro55sz8V/aBEOE+gPiB3OuSiJ0g1c",
	"cKKwg8u6ULQq4FOOY3fqep1zVpeJTbI/TV7n4ed3nNu2Uy5adHoYB+n2I5+izSpwRJntplP16trrUhg6",
	"wHtzaAyi12cvScBkdLA/i6UJ9RKiQ1tcnMEPQw+KNQp+mM6vVU83z1/noH8DXFi4VXvkVNle6OnDlfK6",
	"dF8zFPos9VNwDuwPeDhVxgPm8RCpz4C168AJYdFGCqMXoplSr2HGPjjhtFkfxhkeD4p6264eTe5jIvY9",
	"WEf30oZXFWVre2mTimpfVBXQe6cXOhDSHvCm7tTV+fEKmLaPcWAeObgiamMynqXtNcalGsdMBRAFiNiY",
	"Zr1a02dgSNdb71lWziaEMPvBnV4jm08I2Ol9XdieE/3gA8Ts8PXh+B9G33XPu2jsZs1/lWZY5qQu1MtH",
	"2pXHrluGkNmOZnt9cg0nSLELveXBbigZMEVzCnpbULVgSG0A2fv6mJoPoBpqKiJICQqE3Zeodq3rgh3M",
	"SGl0lOG+gJSoob/dHLfo439AmB4YZsW0IGpR4BhvlKri2azgKSk2XKo4cpfuzCp2SKUxKbZIW0FmRL1/",
	"3P8bAAD//8qZX5ajEgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

